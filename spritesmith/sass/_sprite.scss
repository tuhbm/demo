/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$green-name: 'green';
$green-x: 0px;
$green-y: 0px;
$green-offset-x: 0px;
$green-offset-y: 0px;
$green-width: 50px;
$green-height: 50px;
$green-total-width: 170px;
$green-total-height: 50px;
$green-image: '../images/sprite.png';
$green: (0px, 0px, 0px, 0px, 50px, 50px, 170px, 50px, '../images/sprite.png', 'green', );
$red-name: 'red';
$red-x: 60px;
$red-y: 0px;
$red-offset-x: -60px;
$red-offset-y: 0px;
$red-width: 50px;
$red-height: 50px;
$red-total-width: 170px;
$red-total-height: 50px;
$red-image: '../images/sprite.png';
$red: (60px, 0px, -60px, 0px, 50px, 50px, 170px, 50px, '../images/sprite.png', 'red', );
$yellow-name: 'yellow';
$yellow-x: 120px;
$yellow-y: 0px;
$yellow-offset-x: -120px;
$yellow-offset-y: 0px;
$yellow-width: 50px;
$yellow-height: 50px;
$yellow-total-width: 170px;
$yellow-total-height: 50px;
$yellow-image: '../images/sprite.png';
$yellow: (120px, 0px, -120px, 0px, 50px, 50px, 170px, 50px, '../images/sprite.png', 'yellow', );
$spritesheet-width: 170px;
$spritesheet-height: 50px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($green, $red, $yellow, );
$spritesheet: (170px, 50px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
